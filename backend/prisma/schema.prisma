// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Enumeraciones
enum Role {
  ADMINISTRADOR
  DOCENTE
  ESTUDIANTE
  OBSERVADOR
}

enum Estado {
  PENDIENTE
  EN_PROCESO
  COMPLETADA
  CANCELADA
}

model Asignatura {
  id          Int      @id @default(autoincrement())
  codigo      String   @unique
  nombre      String
  descripcion String?  @db.Text
  cursos      Curso[]
}

model User {
  id                      Int                @id @default(autoincrement())
  firstName              String
  lastName               String
  email                   String             @unique
  password                String
  role                    Role               @default(ESTUDIANTE)
  createdAt               DateTime           @default(now())
  updatedAt               DateTime           @updatedAt

  tareas                  Tareas[]
  tareasDocente           Tarea[]            @relation("UserTareasDocente")
  cursos                  Curso[]            @relation("CursoEstudiantes")
  cursosDocente           Curso[]            @relation("CursoDocentes")
  asignacionesEstudiante  TareaAsignacion[]  @relation("AsignacionEstudiante")
  entregas                Entrega[]          @relation("EntregaEstudiante")
  notificaciones          Notificacion[]
  retroalimentaciones     Retroalimentacion[]
}

model Tareas {
  id          Int      @id @default(autoincrement())
  titulo      String
  descripcion String
  fecha       DateTime @default(now())
  estado      Estado   @default(PENDIENTE)
  usuarioId   Int
  usuario     User     @relation(fields: [usuarioId], references: [id])
}

model Curso {
  id           Int                 @id @default(autoincrement())
  nombre       String
  codigo       String              @unique
  descripcion  String?             @db.Text
  activo       Boolean             @default(true)
  createdAt    DateTime            @default(now())
  updatedAt    DateTime            @updatedAt

  asignaturaId Int
  asignatura   Asignatura          @relation(fields: [asignaturaId], references: [id])

  estudiantes  User[]              @relation("CursoEstudiantes")
  docentes     User[]              @relation("CursoDocentes")
  asignaciones TareaAsignacion[]
}

model Tarea {
  id                         Int                  @id @default(autoincrement())
  titulo                     String
  descripcion                String
  fechaEntrega               DateTime
  docenteId                  Int
  docente                    User                 @relation("UserTareasDocente", fields: [docenteId], references: [id])
  archivoUrl                 String?
  habilitada                 Boolean              @default(true)
  notaMaxima                 Float                @default(10.0)
  editableHastaUltimaEntrega Boolean             @default(true)

  asignaciones               TareaAsignacion[]
  entregas                   Entrega[]
  retroalimentaciones        Retroalimentacion[]
}

model TareaAsignacion {
  id            Int     @id @default(autoincrement())
  tareaId       Int
  tarea         Tarea   @relation(fields: [tareaId], references: [id])
  cursoId       Int?    // Si es grupal
  curso         Curso?  @relation(fields: [cursoId], references: [id])
  estudianteId  Int?    // Si es individual
  estudiante    User?   @relation("AsignacionEstudiante", fields: [estudianteId], references: [id])
}

model Entrega {
  id             Int                 @id @default(autoincrement())
  tareaId        Int
  tarea          Tarea              @relation(fields: [tareaId], references: [id])
  estudianteId   Int
  estudiante     User               @relation("EntregaEstudiante", fields: [estudianteId], references: [id])
  fecha          DateTime           @default(now())
  fueraDePlazo   Boolean            @default(false)
  calificacion   Float?
  observaciones  String?
  archivos       ArchivoEntrega[]
}

model ArchivoEntrega {
  id         Int      @id @default(autoincrement())
  entregaId  Int
  entrega    Entrega  @relation(fields: [entregaId], references: [id])
  url        String
  tipo       String   // PDF, ZIP, IMG
  sizeMB     Float
}

model Retroalimentacion {
  id            Int      @id @default(autoincrement())
  tareaId       Int
  tarea         Tarea    @relation(fields: [tareaId], references: [id])
  estudianteId  Int
  estudiante    User     @relation(fields: [estudianteId], references: [id])
  nota          Float
  observacion   String   @db.Text
  archivoUrl    String?
  fecha         DateTime @default(now())
  notificado    Boolean  @default(false)
}

model Notificacion {
  id         Int      @id @default(autoincrement())
  usuarioId  Int
  usuario    User     @relation(fields: [usuarioId], references: [id])
  mensaje    String
  leido      Boolean  @default(false)
  fecha      DateTime @default(now())
  tipo       String   // NUEVA_TAREA, ENTREGA, RETRO, etc.
}